name: Integration-Tests-for-Metastore

on:
  pull_request:
    branches:
      - main
      - test1
      # or whichever branches you want

jobs:
  queued-sleep:
    runs-on: ubuntu-latest
    steps:
      - name: Wait for my turn in queue
        uses: actions/github-script@v6
        with:
          script: |
            /*
              We'll block until *no older runs* of this same workflow are
              still in 'queued' or 'in_progress' status. That effectively
              enforces a FIFO sequence for all runs of "Integration-Tests-for-Metastore."
            */
            const { owner, repo } = context.repo;
            const currentRunId = context.runId;

            // 1) Get info about *this* run, including its creation time.
            const currentRunResponse = await github.rest.actions.getWorkflowRun({
              owner,
              repo,
              run_id: currentRunId
            });
            const creationTime = new Date(currentRunResponse.data.created_at).getTime();

            // 2) Repeatedly poll for older runs that haven't finished yet.
            while(true) {
              let blockingFound = false;

              // Also check 'in_progress'
              if(!blockingFound) {
                response = await github.rest.actions.listWorkflowRunsForRepo({
                  owner,
                  repo,
                  workflow_id: "Integration-Tests-for-Metastore",
                  status: "in_progress",
                  per_page: 100
                });
                console.log("The workflow runs that are in queue currently");
                for(const run of response.data.workflow_runs) {
                  if(run.id !== currentRunId) {
                    
                    const otherCreated = new Date(run.created_at).getTime();
                    if(otherCreated < creationTime) {
                      console.log(run.id)
                      blockingFound = true;
                      break;
                    }
                  }
                }
              }

              // If we didn't find any older queued or in-progress runs, proceed.
              if(!blockingFound) {
                console.log("No older runs are blocking me. Proceeding!");
                break;
              }

              // Otherwise wait 30 seconds and check again.
              console.log("An older run is still queued or in progress. Waiting 15s...");
              await new Promise(res => setTimeout(res, 15_000));
            }

            console.log("It's my turn now!");

      - name: Actually Sleep
        run: sleep 240
